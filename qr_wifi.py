#!/usr/bin/python
import argparse
import os
import pathlib
import shlex
import subprocess
import typing

PREFIX = b'QR-Code:WIFI:'


class Wifi(typing.NamedTuple):
    ssid: str
    security: str
    password: str = ''
    hidden: bool = False


def main():
    config = parse_args()

    if not config.interface:
        config.interface = detect_wireless_interface()

    cmd = ['zbarcam']
    if not config.gui:
        cmd.append('--nodisplay')
    with subprocess.Popen(cmd, stdout=subprocess.PIPE) as proc:
        try:
            for line in proc.stdout:
                print(f'Received data "{line.decode().strip()}"')
                wifi = parse_qr_data(line)
                if wifi:
                    write_netctl_file(config.interface, wifi)
                    if not config.multiple:
                        break
        finally:
            proc.terminate()


def parse_args():
    parser = argparse.ArgumentParser(description='Generate netctl profiles from QR-Codes scanned via webcam. '
                                                 'Requires zbar to be installed. '
                                                 'When started as root, the script writes profiles to '
                                                 '/etc/netctl/{INTERFACE}-{SSID}. Otherwise, the content of the '
                                                 'profile is printed to stdout. Press CTRL+C to cancel.')
    parser.add_argument('-i', '--interface', help='Wifi interface name. Autodetected if not specified')
    parser.add_argument('-g', '--gui', default=False, action='store_true', help='Show the zbar capture gui')
    parser.add_argument('--multiple', default=False, action='store_true',
                        help='Do not terminate after having scanned the first wifi code')
    return parser.parse_args()


def detect_wireless_interface() -> str:
    for device_path in pathlib.Path('/sys/class/net').iterdir():
        if device_path.is_dir() and device_path.joinpath('wireless').is_dir():
            interface = device_path.name
            print(f'Detected wireless interface {interface}')
            return interface
    else:
        raise Exception('Could not detect a wireless interface. Please specify one with --interface')


def parse_qr_data(data: bytes) -> typing.Optional[Wifi]:
    if not data.startswith(PREFIX):
        return None

    parameter_data = data[len(PREFIX):]

    parameters = {}
    for token in split_by(parameter_data.decode(), ';'):
        if not token:
            continue
        key, *values = split_by(token, ':')
        parameters[key] = unescape(values[0]) if len(values) else None

    return Wifi(
        ssid=parameters['S'],
        security=parameters['T'].lower() or 'none',
        password=parameters['P'],
        hidden='H' in parameters,
    )


def split_by(data: str, delimiter: str) -> [str]:
    tokens = ['']
    skip_next = False
    for c in data:
        if skip_next:
            skip_next = False
        elif c == '\\':
            skip_next = True
        elif c == delimiter:
            tokens.append('')
            continue
        tokens[-1] += c
    return tokens


def unescape(value: str) -> str:
    for char in ['.', ':', ';', '\\']:
        value = value.replace('\\' + char, char)
    return value


def write_netctl_file(interface: str, wifi: Wifi):
    content = netctl_content(interface, wifi)

    if os.getuid() == 0:
        path = f'/etc/netctl/{interface}-{wifi.ssid}'
        if os.path.exists(path):
            raise Exception(f'Profile {path} already exists.')
        print(f'Writing profile {path}')
        with open(path, 'w') as f:
            f.write(content)
    else:
        print('Cannot write profile without being root. The content would be:')
        print('-' * 80 + '\n' + content + '-' * 80)


def netctl_content(interface: str, wifi: Wifi) -> str:
    content = ''
    content += quote_profile_entry('Description', f'Autogenerated by {__file__}')
    content += quote_profile_entry('Interface', interface)
    content += quote_profile_entry('Connection', 'wireless')
    content += quote_profile_entry('ESSID', wifi.ssid)
    content += quote_profile_entry('Security', wifi.security)
    if wifi.password:
        content += quote_profile_entry('Key', quote_key(wifi.password))
    if wifi.hidden:
        content += quote_profile_entry('Hidden', 'yes')
    content += quote_profile_entry('IP', 'dhcp')
    return content


def quote_key(key: str) -> str:
    if key.startswith('"'):
        return f'""{key}"'
    else:
        return key


def quote_profile_entry(key: str, value: str) -> str:
    return key + '=' + shlex.quote(value) + '\n'


if __name__ == '__main__':
    main()
